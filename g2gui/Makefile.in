GCJ=@GCJ@
FIND=@FIND@

OBJ_DIR=@OBJ_DIR@

JAR_DIR=jar
SRC_DIR=src
RES_DIR=resources

SWT_ARGS=-fjni

JAR_PATH=$(shell $(FIND) $(JAR_DIR) -name "*.jar" -printf "-I%p " )
GCJ_ARGS=-c -w -Os -fjni $(JAR_PATH) -I$(JAR_DIR)/@RUNTIME_DIR@ -I$(JAR_DIR)/@SWT_DIR@ -Isrc -I.

G2GUI_JAVA_OBJECTS= $(shell $(FIND) $(SRC_DIR) -type f  -name "*.java"  ! -name "*#*" -printf "%p ")
G2GUI_O_OBJECTS=$(subst .java,.o,$(G2GUI_JAVA_OBJECTS))
G2GUI_RES_OBJECTS = $(shell $(FIND) $(SRC_DIR) -type f  ! -path "*CVS*" ! -name "*.java" -printf "%p.o ")
OTHER_RESOBJECTS=$(subst /,.,$(shell $(FIND) $(RES_DIR) -type f  ! -path "*CVS*" ! -name "*.java" -printf "%p.o "))

MAINCLASS=net.mldonkey.g2gui.view.G2Gui

UNAME=$(word 1, $(shell uname -a))

ifeq ($(UNAME),Linux)
	SYSTYPE=gtk
	PROGRAM=g2gui-bin
	LINK_ARGS= -s -static-libgcc -Wl,-rpath,.	
	POST_COMPILE= cp ./build/g2gui-starter.example ./g2gui
else
	SYSTYPE=win
	PROGRAM=g2gui.exe
	LINK_ARGS=-s -mwindows \
	-Dgnu.gcj.runtime.NameFinder.demangle=false \
	-Dgnu.gcj.runtime.NameFinder.use_addr2line=false	
	POST_COMPILE=
endif

JAROBJECTS = $(subst .jar,.o, $(notdir $(wildcard $(JAR_DIR)/*.jar)))


define file_path
$(subst .,/,$(basename $*))$(suffix $*)
endef

vpath % $(shell $(FIND) $(JAR_DIR) $(OBJ_DIR) -type d)
############
# TARGETS: #
############
.PHONY : swt libs mkobjdir

all : mkobjdir $(PROGRAM) 
	@$(POST_COMPILE)
	@echo --- DONE ---

libs:
	@$(MAKE) -C $(JAR_DIR)

$(G2GUI_O_OBJECTS): %.o :%.java
	@if [ ! -d $(OBJ_DIR)/$(dir $@) ]; then  \
	mkdir -p $(OBJ_DIR)/$(dir $@) ;\
	fi
	$(GCJ)  $(GCJ_ARGS) -o $(OBJ_DIR)/$@ $<

$(filter %.o,$(G2GUI_RES_OBJECTS)): %.o : %
	@if [ ! -d $(OBJ_DIR)/$(dir $@) ]; then  \
	mkdir -p $(OBJ_DIR)/$(dir $@) ;\
	fi
	$(GCJ) $(GCJ_ARGS) --resource $(subst $(SRC_DIR)/,,$*) -o $(OBJ_DIR)/$@ $<

$(OTHER_RESOBJECTS) :%.o : $(subst .,/,$<)
	$(GCJ) $(GCJ_ARGS) --resource $(subst $(RES_DIR)/,,$(file_path)) -o $(OBJ_DIR)/$@ $(file_path)

$(PROGRAM): libs $(G2GUI_RES_OBJECTS) $(G2GUI_O_OBJECTS) $(OTHER_RESOBJECTS) @PLATFORM_TARGETS@
	$(GCJ) --main=$(MAINCLASS) $(LINK_ARGS) -o $(PROGRAM) $(JAR_DIR)/$(OBJ_DIR)/*.o $(shell $(FIND) $(OBJ_DIR) -name "*.o" -printf "%p ")


icon.o : % : build/g2gui.rc
	windres -o $(OBJ_DIR)/$@ build/g2gui.rc

mkobjdir :
	@if [ ! -d $(OBJ_DIR) ]; then  \
	mkdir $(OBJ_DIR) ;\
	fi


cleanobjs:
	@echo "Cleaning up"
	@find . -name "*.o" | xargs rm
	@echo "All .o and .so files cleaned up."

clean: cleanobjs
